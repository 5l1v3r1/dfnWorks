//================  ============================================================
//Mandatory Mathematica/Generating Fracture Network Parameters: 


stopCondition: 1
	/* 0: stop once nPoly fractures are accepted
	   1: stop once all family's p32 values are equal or greater than the families
	   			target p32 values (defined in stochastic family sections)
	*/			 

nPoly: 65
     /* Total number of fractures you would like to have 
		in the domain you defined. The program will complete 
		once you have nPoly number of fractures, 
		maxPoly number of polygon/fracture rejections, 
	    rejPoly number of rejections in a row, or reach a 
	    specified fracture cluster size if using 
	    stoppingParameter = -largestSize  */

domainSize: {100,100,100} 

     /* Mandatory Parameter.
		Creates a domain with dimension x*y*z centered at the origin.*/

numOfLayers: 3    //number of layers

/*  Layers need to be listed line by line
	Format: {minZ, maxZ}
	The first domain listed is layer 1, the second is layer 2, etc
	The layer order is used to assign a fracture family to a sub domain */

//{-z,+z}	
layers: 
{40,50}
{-20,37}
{-50,-17}


h: 0.25
  /* Minimum fracture length scale(meters)
    Any fracture intersection length of less than h will be rejected. */

   
//============================================================================
/* Fracture Network Parameters: 											*/

insertUserRectanglesFirst: 0

tripleIntersections: 1
/* Options:		0: Off
				1: On    */


printRejectReasons: 0
/* Useful in debugging, 
   This option will print all fracture rejection reasons as they occur.
        0: disable
        1: print all rejection reasons to screen
*/


forceLargeFractures: 1
/*  Inserts the largest possible fracture for each defined fracture family,
    defined by the user-defined maxium radius
        0 - Off (Do not force insertion of larest fractures)
        1 - On  (Force insertion of largest fractures)
*/



disableFram: 0
/* This option disables the FRAM algorithm. There will be no
   fracture rejections or fine mesh. Defaults visualizationMode to 0.
        0 - Enable  FRAM
        1 - Disable FRAM
*/


visualizationMode: 0
/* Options: 0 or 1 
   Used during meshing: 
   0: creates a fine mesh, according to h parameter;
   1: produce only first round of triangulations. In this case no 
   modeling of flow and transport is possible. */ 

seed: 987654321
    //Seed for random generator. 
		

domainSizeIncrease: {5,5,5} 
          //temporary size increase for inserting fracture centers outside domain
          //increases the entire width by this ammount. So, {1,1,1} will increase
          //the domain by adding .5 to the +x, and subbtracting .5 to the -x, and so on


keepOnlyLargestCluster: 0
	// 0 = Keep any clusters which connect the specified boundary faces in boundaryFaces option below
	// 1 = Keep only the largest cluster which connects the specified boundary faces in boundaryFaces option below


ignoreBoundaryFaces: 0  
/* 
   0 = use boundaryFaces option below 

   1 = ignore boundaryFaces option and keep all clusters 
   Will still remove fractures with no intersections              
   (Should work but not yet tested)
  
  
*/
          
boundaryFaces: {1,1,1,1,1,1}
/*	Will only keep clusters with connections to domain boundaries listed:
	Program will keep only clusters which connect to every specified face     

	boundaryFaces[0] = +X
	boundaryFaces[1] = -X
	boundaryFaces[2] = +Y
	boundaryFaces[3] = -Y 
	boundaryFaces[4] = +Z
	boundaryFaces[5] = -Z	 */
		                  

rejectsPerFracture: 50  /*If fracture is rejected, it will be re-translated to a new
					     position this number of times. This helps hit distribution targets
					     for stochastic families (set to 1 to ignore this feature)*/



//===========================================================================
//                  Shape and Probability Parameters
//===========================================================================

//user rectangles and user Ellipses defined in their cooresponding files

famProb: {0.09,0.09,0.066,0.066,0.066,0.066,0.066,0.056,0.066,0.056,0.066,0.066,0.066,0.066,0.048} 
/* Probability of occurrence of each family of randomly distrubuted rectangles
   and ellipses (first two dimensions of nShape).
   User-ellipses and user-rectangles insertion will be attempted with 100% 
   likelihood, but with possability they may be rejected.
   The famProb elements should add up to 1.0 (for %100).
   The probabilities are listed in order of families.
   For example: If nShape={2,1,0,0} and famProb={.4,.5,.1}, then the first 
   two famProb numbers are the probabilities of incurring a polygon from 
   the two ellipses' families, and the third number is the probability of 
   incurring a polygon of the rectangular family.*/

   
/*===========================================================================*/
//===========================================================================
//                      Elliptical Fracture Options                                     
//      NOTE: Number of elements must match number of ellipse families  
//            (first number in nShape input parameter)                         
//===========================================================================
/*===========================================================================*/
outputAllRadii: 0
/*  Caution: Can create very large files.
    Outputs all fractures which were generated during
    DFN generation.
        0: Do not output all radii file.
        1: Include file of all raddii, acepted + rejected fractures,
           in output files (radii_All.dat).
*/

outputFinalRadii: 1
/*  Ouputs radii file after isolated fracture removal.
        0: Do not output final radii file.
        1: Create final radii file (radii_Final.dat).
           File contains radii of all fractures in the  final DFN,
           after isolated fracture removal,
           as well as the fracture family they belong.
*/

outputAllAcceptedRadii: 0
/*  Outputs radii file before isolated fracture removal.
        0: Do not output all accepted radii file.
        1: Output all accetped fracture's radii
           to file (radii_AllAccepted.dat)
*/

outputFinalRadiiPerFamily: 0
/*  Outputs radii files after isolated fracture removal, per family.
        0: Do not create output files of radii per family
        1: Creates output files per family, containing a list
           of the family's fracture radii that is in the final DFN
*/

outputAcceptedRadiiPerFamily: 0
/*  Outputs radii files before isolated fracture removal, per family.
        0: Do not create output files of radii per family
        1: Creates output files per family, containing a list
           of the family's fracture radii in the domain before isolated
           fracture removal.
*/
outputTriplePoints: 0
/*  Output triple intersection points to file.
        0: Do not generate triplePoints.dat file
        1: Output triple points (x,y,z) to triplePoints.dat.
*/



//Number of ellipse families
nFamEll: 0

eLayer: {0,0,0}
	/* Defines which domain the family belings to.
	 Layer 0 is the entire domain.
	 Layers numbered > 0 coorespond to layers defined above
	 1 corresponts to the first layer listed, 2 is the next layer listed, etc */

//edist is a mandatory parameter if using statistically generated ellipses 
edistr: {2,2,2}   /* Ellipse statistical distribution options:
                      1 - lognormal distribution
     	              2 - truncated power law distribution   
	                  3 - exponential distribution
			          4 - constant */
			          			                               			          
			          
ebetaDistribution: {1,1,1}   /* Beta is the rotation around the polygon's normal
					vector, with the polygon centered on x-y plane at the orgin 
					
					0 - uniform distribution [0, 2PI]	
					1 - constant angle (specefied below)	*/				
	
	
e_p32Targets: {.002,.002,.002} /*rectangle families target fracture intensity
When using stopCondition = 1, defined at the top of the input file, families will 
be inserted untill the families desired fracture intensity has been reached. 
Once all families desired fracture intensity has been met, fracture generation will 
be complete and proceed with output.
*/			          
			          
//===========================================================================
// Parameters used by all stochastic ellipse families 
// Mandatory Parameters if using statistically generated ellipses  

easpect: {1, 1, 1}  /* Aspect ratio. Used for lognormal and truncated 
                    power law distribution. */

enumPoints: {12, 12, 12} /*Number of vertices used in creating each elliptical 
		                   fracture family. Number of elements must match number 
		                   of ellipse families (first number in nShape) */

eAngleOption: 0     /* All angles for ellipses: 
                       0 - degrees
                       1 - radians (Must use numerical value for PI) */
						
etheta: {-45, 0, 45} /*Ellipse fracture orientation.
                     The angle the normal vector makes with the z-axis */

ephi: {0, 45, -45}  /* Ellipse fracture orientation.
                    The angle the projection of the normal onto the x-y plane
                    makes with the x-axis */

ebeta: {0, 0, 0}   /* rotation around the normal vector */


ekappa: {8,8,8}  /*Parameter for the fisher distribnShaprutions. The bigger, the more 
		                similar (less diverging) are the elliptical familiy's
		                normal vectors */				

//===========================================================================
// Options Specific For Ellipse Lognormal Distribution (edistr=1): 
// Mandatory Parameters if using ellispes with lognormal distribution 

//          NOTE: Number of elements must match number of
//                ellipse families (first number in nShape)

eLogMean: {2}  //Mean value For Lognormal Distribution.       
		       
esd: {.5} // Standard deviation for lognormal distributions of ellipses

eLogMin: {.5}

eLogMax: {1000}

//===========================================================================
//     Options Specific For Ellipse Exponential Distribution (edistr=3): 
//     Mandatory Parameters if using ellispes with exponential distribution 


eExpMean: {200}  //Mean value for Exponential  Distribution     

eExpMin: {.5}

eExpMax: {1000}

//===========================================================================
//    Options Specific For Constant Size of ellipses (edistr=4):

econst: {10, 10, 10}  // Constant radius, defined per family     
		       
//===========================================================================
// Options Specific For Ellipse Truncated Power-Law Distribution (edistr=2)
// Mandatory Parameters if using ellipses with truncated power-law dist. 

// NOTE: Number of elements must match number 
//       of ellipse families (first number in nShape)

emin: {200, 200,200} // Minimum radius for each ellipse family. 
             // For power law distributions. 

emax: {350, 350, 350}  // Maximum radius for each ellipse family.
		          // For power law distributions. 
					
ealpha: {2.5,2.5,2.5} // Alpha. Used in truncated power-law 
			            // distribution calculation


/*==================================================================================*/
/*==================================================================================*/
/*                             Rctangular Fractures Options                         */
/* NOTE: Number of elements must match number of rectangle families                 */
/*       (second number in nShape parameter)                                        */
/*==================================================================================*/
/*==================================================================================*/
//Number of rectangle families
nFamRect: 15
	//having this option = 0 will ignore all rectangle family variables


rLayer: {1,1,1,1,1,2,2,2,2,2,3,3,3,3,3}
	/* Defines which domain the family belings to.
	 Layer 0 is the entire domain.
	 Layers numbered > 0 coorespond to layers defined above
	 1 corresponts to the first layer listed, 2 is the next layer listed, etc */


/*rdist is a mandatory parameter if using statistically generated rectangles */
rdistr: {1,1,3,2,2,1,1,3,2,2,1,1,3,2,2}   /*  Rectangle statistical distribution options:
	                	1 - lognormal distribution
		                2 - truncated power law distribution 
		                3 - exponential distribution
	                	4 - constant */

rbetaDistribution: {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}   /* Beta is the rotation/twist about the z axis
					with the polygon centered on x-y plane at the orgin 
					before rotation into 3d space
					
					0 - uniform distribution [0, 2PI]	
					1 - constant angle (specefied below)
					
				*/ 			          	                	  
				
r_p32Targets: {.51,.51,.47,.3,.18,0.02,0.027,0.061,0.22,0.00255,.67,.12,.11,.11,.0000044} /*rectangle families target fracture intensity
When using stopCondition = 1, defined at the top of the input file, families will 
be inserted untill the families desired fracture intensity has been reached. 
Once all families desired fracture intensity has been met, fracture generation will 
be complete and proceed with output.
*/
	             
//============================================================================ 
// Parameters used by all stochastic rectangle families 
// Mandatory Parameters if using statistically generated rectangles   

raspect: {5,5,1,5,5,5,5,1,5,5,5,5,1,5,5}  /* Aspect ratio */
 
rAngleOption: 0     /* All angles for rectangles: 
                       0 - degrees
                       1 - radians (must be numerical value, cannot use "Pi") */
 
rtheta: {95.78,1.58,5.68,134.72,44.09,95.78,1.58,5.68,134.72,44.09,95.78,1.58,5.68,134.72,44.09} /*Rectangle fracture orientation.
                          The angle the normal vector makes with the z-axis */

rphi: {9.14,4.71,79.4,12.51,17.66,9.14,4.71,79.4,12.51,17.66,9.14,4.71,79.4,12.51,17.66} /* Rectangle fracture orientation.
				The angle the projection of the normal onto the x-y
				plane makes with the x-axis */
      
rbeta: {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}   /* rotation around the normal vector */

rkappa: {2.09,5.28,2.48,1.82,1.46,2.09,5.28,2.48,1.82,1.46,2.09,5.28,2.48,1.82,1.46}  /*Parameter for the fisher distributions. The bigger, 
		                      the more similar (less diverging) are the rectangle 
		                      familiy's normal vectors  */

//=============================================================================
// Options Specific For Rectangle Lognormal Distribution (rdistr=1):
// Mandatory Parameters if using rectangles with lognormal distribution 

rLogMean: {1.250,1.250,1.250,1.250,1.250,1.250 }   /*For Lognormal Distribution. 
				    Mean radius (1/2 rectangle length) in 
				    lognormal distribution for rectangles. */
		           

rsd: {0.877, 0.877, 0.877, 0.877, 0.877, 0.877 }     /* Standard deviation for lognormal distributions of 
			          rectangles */
			          
rLogMin: {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}

rLogMax: {10.0, 10.0, 60.0, 60.0, 30.0, 30.0}			          

//=============================================================================
// Options Specific For Rectangle Truncated Power-Law Distribution (rdistr=2): 
// Mandatory Parameters if using rectangles with power-law distribution 

 rmin: {1.5, 1.5,1.5,1.5,1.5,1.5}         /* Minimum radius for each rectangle family. 
			                     For power law distributions. */

 rmax: {250,250,250,250,250,250}   /* Maximum radius for each rectangle family.
			              For power law distributions. */

 ralpha: {2.6,2.01,2.6,2.01,2.6,2.01}   // Alpha. Used in truncated power-law 
			         // distribution calculation


/*===========================================================================*/
/* Options Specific For Rectangle Exponential Distribution (edistr=3):       */
/* Mandatory Parameters if using rectangules with exponential distribution   */

rExpMean: {3.373,3.373,3.373}  //Mean value for Exponential  Distribution

rExpMin: {1.0, 1.0, 1.0}

rExpMax: {250.0, 250.0, 250.0}

/*===========================================================================*/
/* Options Specific For Constant Size of rectangles (edistr=4):              */

rconst: {5,5,30,30,15,15}  // Constant radius, defined per rectangular family       
		       
/*===========================================================================*/
/*===========================================================================*/
/* User-Specified Ellipses                                                   */
/* Mandatory Parameters if using user-ellipses                               */
/* NOTE: Number of elements must match number of user-ellipse families       */
/*(third number in nShape parameter)                                         */
/*===========================================================================*/
/* NOTE: Only one user-ellipse is placed into the domain per defined 
         user-ellipse, with possibility of being rejected  */


//(not yet implemented)	
userEllipsesOnOff: 0	//0 - User Ellipses off
						//1 - User Ellipses on


UserEll_Input_File_Path: ./inputFiles/userPolygons/uEllInput.dat



/*===========================================================================*/
/* User-Specified Rectangles                                                 */
/* Mandatory Parameters if using user-rectangles                             */
/* NOTE: Number of elements must match number of user-ellipse families       */
/* (fourth number in nShape parameter)                                       */
/*===========================================================================*/
/* NOTE: Only one user-rectangle is placed into the domain per defined 
         user-rectangle, with possibility of being rejected  */
         

userRectanglesOnOff: 0	//0 - User Rectangles off
						//1 - User Rectangles on

UserRect_Input_File_Path: ./inputFiles/userPolygons/uRectInput.dat



/*===========================================================================*/
/* If you would like to input user specified rectangles according to their
  coordinates, you can use the parameter userDefCoordRec. In that case, all			//COMMENTS NEED UPDATE
  of the user specified rectangles will have to be according to coordinates.
  You cannot specify user defined rectangles according to both
  coordinates and to parameters such as urb, uraspect, etc.*/



userRecByCoord: 0
//  0 - user defined rectangles not used
//  1 - user defined rectangles used and defined by input file:

RectByCood_Input_File_Path: ./intputFiles/userPolygons/rectCoords.dat


/*WARNING: userDefCoordRec can cause LaGriT errors because the polygon 
vertices are not put in clockwise or counter-clockwise order.
If errors, try to reorder the points till u get it right.
Also, coordinates must be co-planar */

/*===========================================================================*/
// Aperture [m]
/* Mandatory parameter, and can be specified in several ways:
- 1)meanAperture and stdAperture for using LogNormal distribution.
- 2)apertureFromTransmissivity, first transmissivity is defined, and then, 
  using a cubic law, the aperture is calculated;
- 3)constantAperture, all fractures, regardless of their size, will have 
  the same aperture value;
- 4)lengthCorrelatedAperture, aperture is defined as a function of fracture size*/

//NOTE: Only one aperture type may be used at a time 

aperture: 3  //choise of aperture option described above

//(**** 1)meanAperture and stdAperture for using LogNormal distribution.********)
meanAperture:  -3 /*Mean value for aperture using  
			                       normal distribution */
stdAperture: 0.8  //Standard deviation     

/*(****** 2)apertureFromTransmissivity, first transmissivity is defined, 
  and then, using a cubic law, the aperture is calculated;***************/
apertureFromTransmissivity: {1.6e-9, 0.8}
	/* Transmissivity is calculated as transmissivity = F*R^k,
	   where F is a first element in aperturefromTransmissivity,
	   k is a second element and R is a mean radius of a polygon. 
	   Aperture is calculated according to cubic law as 
	   b=(transmissivity*12)^1/3 */
	   
/*(****** 3)constantAperture, all fractures, regardless of their size, 
   will have the same aperture value;	**********************************/
      
constantAperture: 1e-5  //Sets constant aperture for all fractures 

/*(******** 4)lengthCorrelatedAperture, aperture is defined as a function of 
       fracture size *******************/
       
lengthCorrelatedAperture: {5e-5, 0.5}
	/*Length Correlated Aperture Option:
	  Aperture is calculated by: b=F*R^k,
	  where F is a first element in lengthCorrelatedAperture, 
	  k is a second element and R is a mean radius of a polygon.*/


//============================================================================
//Permeability 
/* Options:
    0: Permeability of each fracture is a function of fracture aperture, 
     given by k=(b^2)/12, where b is an aperture and k is permeability
    1: Constant permeabilty for all fractures */

permOption: 1  //See above for options

constantPermeability: 1e-12  //Constant permeability for all fractures 


  
